//
//  SKLLVMClang.m
//  iOSBasicDemo
//
//  Created by shavekevin on 2019/12/29.
//  Copyright © 2019 小风. All rights reserved.
//

#import "SKLLVMClang.h"

@implementation SKLLVMClang

@end

// 面试题答案：iOS代码是怎样转化为机器语言的？
/**
 答：OC 代码->C/C++->汇编语言->机器语言
 */
// 名词解释: 什么是机器语言？
/*
 编译语言（英语：Compiled language）是一种以编译器来实现的编程语言。它不像解释型语言一样，由解释器将代码一句一句运行，而是以编译器，先将代码编译为机器码，再加以运行。理论上，任何编程语言都可以是编译式，或直译式的。它们之间的区别，仅与程序的应用有关。---来自维基百科

 */
// 面试题答案：静态库和动态库有什么区别？
/**
 答：静态库在编译期。
    动态库在运行期。
    静态库在程序编译时会被链接到目标代码中，程序运行时将不再需要改静态库；静态库：以.a 和 .framework为文件后缀名。
     动态库在程序编译时并不会被链接到目标代码中，只是在程序运行时才被载入，因为在程序运行期间还需要动态库的存在。动态库：以.tbd(之前叫.dylib) 和 .framework 为文件后缀名。（系统直接提供给我们的framework都是动态库！）
 
 // .a 是一个纯二进制文件，.framework 中除了有二进制文件之外还有资源文件。 .a ，要有 .h 文件以及资源文件配合， .framework 文件可以直接使用。总的来说，.a + .h + sourceFile = .framework。所以创建静态库最好还是用.framework的形式

  静态库优点:
 1.模块化，分工合作，提高了代码的复用及核心技术的保密程度
 2.避免少量改动经常导致大量的重复编译连接
 3.也可以重用，注意不是共享使用

 动态库 优点：
 1.使用动态库，可以将最终可执行文件体积缩小，将整个应用程序分模块，团队合作，进行分工，影响比较小
 2.使用动态库，多个应用程序共享内存中得同一份库文件，节省资源
 3.使用动态库，可以不重新编译连接可执行程序的前提下，更新动态库文件达到更新应用程序的目的。
 4.应用插件化
 5.软件版本实时模块升级
 6.共享可执行文件 在其它大部分平台上，动态库都可以用于不同应用间共享，这就大大节省了内存。

 从目前来看，iOS仍然不允许进程间共享动态库，即iOS上的动态库只能是私有的，因为我们仍然不能将动态库文件放置在除了自身沙盒以外的其它任何地方。 不过iOS8上开放了App Extension功能，可以为一个应用创建插件，这样主app和插件之间共享动态库还是可行的。
 
 
 
对于动态库而言分动态链接库和动态加载库 两种的，这两个最本质的区别还是加载时间。
 动态链接库：在没有被加载到内存的前提下，当可执行文件被加载，动态库也随着被加载到内存中。在 Linked Framework and Libraries 设置的一些 share libraries。【随着程序启动而启动】
 动态加载库：当需要的时候再使用 dlopen 等通过代码或者命令的方式来加载。【在程序启动之后】

 
 https://www.cnblogs.com/junhuawang/p/7598236.html  iOS 静态库和动态库（库详解）
 // 使用动态库可以进行包瘦身。

 */

/*
 传统的编译器的结构：
 sourceCode->fronted(前端：词法分析 语法分析 语义分析 生成中间代码)->optimizer(优化器：中间代码优化)->backed(后端：生成机器码)->机器码 
 */
